{% extends "ObCmsBundle::layout.html.twig" %}

{% block content %}
    <div class="space">
        <div class="page-header">
            <h1>Howdy!</h1>
        </div>

        <p class="lead">
            Welcome to this fresh installation of ObCms. You can easily add bundles to the CMS with a few simple
            configs. I suggest you create a seperate config file named <code>app/config/vendor/config_ob.yml</code>
            that you then import in you config.yml like this:
        </p>
<pre class="prettyprint linenums lang-yaml">
# app/config/config.yml
imports:
    - { resource: parameters.ini }
    - { resource: security.yml }
    - { resource: vendor/config_ob.yml }
</pre>
        <p class="lead">
            Once this is done, you can start to register entities with the required options like this:
        </p>

<pre class="prettyprint linenums lang-yaml">
# app/config/vendor/config_ob.yml
ob_cms_core:
  bundles:
    acme:
      repository: AcmeHelloBundle:Hello
      entity: Acme\HelloBundle\Entity\Hello
      listDisplay: [title, author, createdAt]
      formDisplay: [title, author, text]
</pre>
        <p class="lead">
            This will add the Hello entity under the name of <code>acme</code> to the CMS and define which fields must
            appear on the listing page and in the forms.
        </p>

        <br>

        <div class="page-header">
            <h1>Going further</h1>
        </div>

        <p class="lead">
            There are numerous other options you can set either globally or on an entity basis:
        </p>

<pre class="prettyprint linenums lang-yaml">
# app/config/vendor/config_ob.yml
ob_cms_core:
  itemsPage: 50 # Set the default number of items per page at 50
  locales: [%locale%, ru] # Add russian to the list of locales, on top of the default locale

  bundles:
    acme: # the entity will be registered under this name
      itemsPage: 20 # Override the number of items par page for this entity
      repository: AcmeHelloBundle:Hello # The repository entities are queried from
      entity: AcmeHelloBundle:Hello # The repository entities are queried from
      listDisplay: [title, author, createdAt] # The fields to display on the listing page
      listLinks: [title] # Fields that link to the edit page, the first one is a link by default
      listSort: [title, author, createdAt] # The list of sortable fields
      listSearch: [title, createdAt] # The list of fields include in the textSearch, doesn't support foreign keys
      listActions: [publish] # A list of entity's function that can be used as actions in the listing
      formDisplay: [title, author, text] # The fields to display in the create and edit form
      listTemplate: AcmeHelloBundle:crud:index.html.twig # The template to use for this entity's listing page
      newTemplate: AcmeHelloBundle:crud:new.html.twig # The template to use for this entity's creation page
      editTemplate: AcmeHelloBundle:crud:edit.html.twig # The template to use for this entity's edit page
      listController: AcmeHelloBundle:Default:index # The controller action to handle the index action
      newController: AcmeHelloBundle:Default:new # The controller action to handle the new action
      createController: AcmeHelloBundle:Default:create # The controller action to handle the create action
      editController: AcmeHelloBundle:Default:edit # The controller action to handle the edit action
      updateController: AcmeHelloBundle:Default:update # The controller action to handle the update action
</pre>

        <br>

        <div class="page-header">
            <h1>Philosophy</h1>
        </div>

        <p class="lead">
            This bundle is created with simplicity in mind, and is loosely based on the excellent Django Admin.
            I created it to help with boilerplate code like crud templates and basic CMS functions and get out
            of the way when you need to do things more complex. There are a lot of entry points to override parts of
            this bundle, you can:
            <ol class="lead">
                <li>
                    Extend a template and use it by setting the <code>listTemplate / newTemplate / editTemplate</code>
                    params
                </li>
                <li>
                    You can override individual actions with the <code>listController / newController /
                    createController / editController / editController</code> params. This is useful when extra
                    operations must be done on creation.
                </li>
                <li>
                    You can <a href="http://symfony.com/doc/2.0/cookbook/bundles/override.html">override any part of this
                    bundle</a> as you would with any other Symfony2 bundles
                </li>
            </ol>
        </p>

        <br><br>
    </div>
{% endblock %}


{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('bundles/obcms/css/prettify.css') }}">
    <style type="text/css">
        ol.lead li{
            min-height:21px;
            margin-bottom: 10px;
        }
        ol.lead li code {
            vertical-align: middle;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('bundles/obcms/js/prettify/prettify.js') }}"></script>
    <script src="{{ asset('bundles/obcms/js/prettify/lang-yaml.js') }}"></script>
    <script type="text/javascript">
        $(function(){
            prettyPrint();
        });
    </script>
{% endblock %}